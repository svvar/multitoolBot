import asyncio
import secrets
import io

from aiogram import Router
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import I18n, gettext as _, lazy_gettext as __
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from concurrent.futures import ThreadPoolExecutor

from bot.core.usage_statistics import usage
from bot.core.locale_helper import locales, countries
from bot.core.states import PasswordGen, NameGen, FanPageName, AddressGen, PhoneGen, QuoteGen, AllFanPageGen
from bot.core.callbacks import CountryPageCallback
from bot.core.storage.quotes_storage import get_random_quotes
from bot.functions.fan_page import generate_names_task, generate_addresses, generate_phones, password_gen, generate_fan_page_names


farmers_router = Router()
gen_semaphore = asyncio.Semaphore(3)
executor = ThreadPoolExecutor()


@farmers_router.message(F.text == __('üöÄ –§–∞—Ä–º–µ—Ä–∞–º'))
@farmers_router.message(F.text == __('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
async def farmers_menu(message: types.Message):
    menu_kb = ReplyKeyboardBuilder()
    menu_kb.button(text=_('üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—ñ–≤'))
    menu_kb.button(text=_('üë® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ–º–µ–Ω'))
    menu_kb.button(text=_('‚ö°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä fan-page'))
    menu_kb.button(text=_('üè† –í –º–µ–Ω—é'))
    menu_kb.button(text=_('üîßüêû –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É'))
    menu_kb.adjust(3, 1, 1)

    await message.answer(_('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:'), reply_markup=menu_kb.as_markup(resize_keyboard=True))

def _password_keyboard(
        n_chars: int = 10,
        special_chars: bool = True,
        letters: bool = True,
        uppercase: bool = True,
        send_as: str = 'Telegram',
        n_passwords: int = 10
):
    tweak_kb = InlineKeyboardBuilder()
    # Pybabel doesn't support f-strings in Python pre 3.12
    tweak_kb.button(text=_('üìè –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤') + ": " + str(n_chars), callback_data='n_chars')
    tweak_kb.button(text=_('‚≠ê –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏') + ": " + ('üü¢' if special_chars else 'üî¥'), callback_data='special_chars')
    tweak_kb.button(text=_('üî§ –ú–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏') + ": " + ('üü¢' if letters else 'üî¥'), callback_data='letters')
    tweak_kb.button(text=_('üî† –í–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏') + ": " + ('üü¢' if uppercase else 'üî¥'), callback_data='uppercase')
    tweak_kb.button(text=_('üì§ –°–ø–æ—Å—ñ–± –≤—ñ–¥–ø—Ä–∞–≤–∫–∏') + ": " + send_as, callback_data='send_as')
    tweak_kb.button(text=_('üîë –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—ñ–≤') + ": " + str(n_passwords), callback_data='n_passwords')
    tweak_kb.button(text=_('‚öôÔ∏è –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏'), callback_data='generate_passwords')
    tweak_kb.adjust(1)

    return tweak_kb


@farmers_router.message(F.text == __('üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—ñ–≤'))
async def password_gen_start(message: types.Message, state: FSMContext):
    data = await state.get_data()
    n_chars = data.get('n_chars', 10)
    special_chars = data.get('special_chars', True)
    letters = data.get('letters', True)
    uppercase = data.get('uppercase', True)
    send_as = data.get('send_as', 'Telegram')
    n_passwords = data.get('n_passwords', 10)

    tweak_kb = _password_keyboard(n_chars, special_chars, letters, uppercase, send_as, n_passwords)

    tweak_msg = await message.answer(_('–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ'), reply_markup=tweak_kb.as_markup())
    await state.set_state(PasswordGen.tweaking)
    await state.update_data({
        'n_chars': n_chars,
        'special_chars': special_chars,
        'letters': letters,
        'uppercase': uppercase,
        'send_as': send_as,
        'n_passwords': n_passwords,
        'this_message_id': tweak_msg.message_id
    })


async def password_gen_update(message: types.Message, state: FSMContext):
    data = await state.get_data()
    n_chars = data.get('n_chars', 10)
    special_chars = data.get('special_chars', True)
    letters = data.get('letters', True)
    uppercase = data.get('uppercase', True)
    send_as = data.get('send_as', 'Telegram')
    n_passwords = data.get('n_passwords', 10)
    this_message_id = data.get('this_message_id')

    tweak_kb = _password_keyboard(n_chars, special_chars, letters, uppercase, send_as, n_passwords)

    try:
        await message.bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=this_message_id,
                                                    reply_markup=tweak_kb.as_markup())
    except Exception as e:
        print(e)

    await state.set_state(PasswordGen.tweaking)


@farmers_router.callback_query(PasswordGen.tweaking)
async def password_gen_tweaking(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback.data == 'n_chars':
        await callback.message.answer(_('–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ {} –¥–æ {}:').format(1, 50))
        await state.set_state(PasswordGen.changing_chars)
        await callback.answer()
        return
    elif callback.data == 'special_chars':
        data['special_chars'] = not data['special_chars']
    elif callback.data == 'letters':
        data['letters'] = not data['letters']
    elif callback.data == 'uppercase':
        data['uppercase'] = not data['uppercase']
    elif callback.data == 'send_as':
        data['send_as'] = 'TXT' if data['send_as'] == 'Telegram' else 'Telegram'
    elif callback.data == 'n_passwords':
        await callback.message.answer(_('–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ {} –¥–æ {}:').format(1, 500))
        await state.set_state(PasswordGen.changing_amount)
        await callback.answer()
        return
    elif callback.data == 'generate_passwords':
        await callback.message.answer(_('‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è...'))
        await callback.answer()
        await generate_passwords(callback, state)
        return

    await state.update_data(data)
    await callback.answer()
    await password_gen_update(callback.message, state)


@farmers_router.message(PasswordGen.changing_chars)
@farmers_router.message(PasswordGen.changing_amount)
async def password_input_value(message: types.Message, state: FSMContext):
    try:
        value = int(message.text)
    except ValueError:
        await message.answer(_('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑'))
        return

    state_name = await state.get_state()
    if state_name == PasswordGen.changing_chars:
        if value < 1 or value > 50:
            await message.answer(_('–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ {} –¥–æ {}:').format(1, 50))
            return

        await state.update_data(n_chars=value)
    elif state_name == PasswordGen.changing_amount:
        if value < 1 or value > 500:
            await message.answer(_('–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ {} –¥–æ {}:').format(1, 500))
            return

        await state.update_data(n_passwords=value)

    data = await state.get_data()
    await message.bot.delete_message(chat_id=message.chat.id, message_id=data['this_message_id'])
    await password_gen_start(message, state)



async def generate_passwords(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    n_chars = data.get('n_chars', 10)
    special_chars = data.get('special_chars', True)
    letters = data.get('letters', True)
    uppercase = data.get('uppercase', True)
    send_as = data.get('send_as', 'Telegram')
    n_passwords = data.get('n_passwords', 10)

    async with gen_semaphore:
        loop = asyncio.get_event_loop()
        passwords = await loop.run_in_executor(executor, password_gen, n_chars, special_chars, letters,
                                               uppercase, n_passwords)

    if send_as == 'Telegram':
        await callback.message.answer('\n'.join(passwords))
    else:
        buffer = io.BytesIO()
        buffer.name = 'passwords.txt'
        buffer.write('\n'.join(passwords).encode())
        buffer.seek(0)

        input_file = types.BufferedInputFile(buffer.getvalue(), filename='passwords.txt')
        await callback.message.answer_document(input_file)

    await state.clear()
    usage.password_generator += 1
    await farmers_menu(callback.message)


@farmers_router.message(F.text == __('üë® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ–º–µ–Ω'))
async def name_gen_start(message: types.Message, state: FSMContext):
    gender_kb = InlineKeyboardBuilder()
    gender_kb.button(text=_('üï∫ –ß–æ–ª–æ–≤—ñ—á–∞'), callback_data='male')
    gender_kb.button(text=_('üíÉ –ñ—ñ–Ω–æ—á–∞'), callback_data='female')
    gender_kb.button(text=_('üë´ –û–±–∏–¥–≤—ñ'), callback_data='both')
    gender_kb.adjust(1)

    message = await message.answer(_('–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å:'), reply_markup=gender_kb.as_markup())
    await state.set_state(NameGen.selecting_gender)
    await state.update_data(this_message_id=message.message_id)


def _countries_kb(page: int, total_pages: int, locale: str):
    kb = InlineKeyboardBuilder()

    locale_items = list(countries[locale].items())
    locale_page_items = locale_items[page * 14:page * 14 + 14]
    locale_page = dict(locale_page_items)

    for code, name in locale_page.items():
        kb.button(text=name, callback_data=code)
    kb.adjust(2)

    nav_row = []
    if page > 0:
        nav_row.append(types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=CountryPageCallback(direction='prev',
                                                                                               action='page').pack()))
    nav_row.append(types.InlineKeyboardButton(text=_('üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∞'), callback_data='random'))
    if page < total_pages:
        nav_row.append(types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=CountryPageCallback(direction='next',
                                                                                               action='page').pack()))

    kb.row(*nav_row)

    return kb


@farmers_router.callback_query(NameGen.selecting_gender)
async def name_gen_saving_gender(callback: types.CallbackQuery, state: FSMContext):
    gender = callback.data
    country_pages = len(locales) // 14

    data = await state.get_data()
    current_page = data.get('country_page', 0)

    await state.update_data(gender=gender, country_page=current_page)
    locale = I18n.get_current()
    kb = _countries_kb(current_page, country_pages, locale.current_locale)
    await callback.bot.edit_message_text(chat_id=callback.message.chat.id,
                                         message_id=data['this_message_id'],
                                         text=_('–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É:'),
                                         reply_markup=kb.as_markup())

    await callback.answer()

    await state.set_state(NameGen.selecting_country)


@farmers_router.callback_query(CountryPageCallback.filter(F.action == 'page'))
# @farmers_router.callback_query(NameGen.selecting_country, CountryPageCallback.filter(F.action == 'page'))
async def switch_country_page(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('country_page', 0)
    country_pages = len(locales) // 14

    callback_data = CountryPageCallback.unpack(callback.data)
    await callback.answer()

    if callback_data.direction == 'next':
        current_page += 1
    else:
        current_page -= 1

    locale = I18n.get_current()
    kb = _countries_kb(current_page, country_pages, locale.current_locale)
    if 'this_message_id' in data:
        await callback.bot.edit_message_reply_markup(chat_id=callback.message.chat.id,
                                                     message_id=data['this_message_id'],
                                                     reply_markup=kb.as_markup())
    else:
        await callback.bot.edit_message_reply_markup(chat_id=callback.message.chat.id,
                                                     message_id=data['locale_message_id'],
                                                     reply_markup=kb.as_markup())
    await state.update_data(country_page=current_page)


@farmers_router.callback_query(NameGen.selecting_country)
async def generate_names(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    gender = data['gender']
    locale = callback.data
    if locale == 'random':
        locale = secrets.choice(list(locales.keys()))

    await callback.answer()

    async with gen_semaphore:
        loop = asyncio.get_event_loop()
        names = await loop.run_in_executor(executor, generate_names_task, gender, locale, 40)

    await callback.message.answer(''.join(names), parse_mode='Markdown')
    await state.clear()
    usage.name_generator += 1
    await farmers_menu(callback.message)


@farmers_router.message(F.text == __('‚ö°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä fan-page'))
async def fan_page(message: types.Message, state: FSMContext):
    fan_page_kb = ReplyKeyboardBuilder()
    fan_page_kb.row(types.KeyboardButton(text=_('üè∑Ô∏è –ù–∞–∑–≤–∞')),
                    types.KeyboardButton(text=_('üìç –ê–¥—Ä–µ—Å–∞')),
                    types.KeyboardButton(text=_('üìû –¢–µ–ª–µ—Ñ–æ–Ω')))
    fan_page_kb.row(types.KeyboardButton(text=_('üí¨ –¶–∏—Ç–∞—Ç–∞')),
                    types.KeyboardButton(text=_('üåê –í—Å–µ —Ä–∞–∑–æ–º')))
    fan_page_kb.row(types.KeyboardButton(text=_('‚Ü©Ô∏è –ù–∞–∑–∞–¥')))

    await message.answer(_('–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é:'), reply_markup=fan_page_kb.as_markup(resize_keyboard=True))


@farmers_router.message(F.text == __('üè∑Ô∏è –ù–∞–∑–≤–∞'))
async def fan_page_name(message: types.Message, state: FSMContext):
    await message.answer(_('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–∑–≤:'))
    await state.set_state(FanPageName.entering_amount)


@farmers_router.message(FanPageName.entering_amount)
async def fan_page_name_gen(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 1 or amount > 100:
            raise ValueError
    except ValueError:
        await message.answer(_('–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ {} –¥–æ {}').format(1, 100))
        return

    async with gen_semaphore:
        loop = asyncio.get_event_loop()
        names = await loop.run_in_executor(executor, generate_fan_page_names, amount)

    await _send_message_and_txt(message, '\n'.join(names), 'fan_page_names.txt')
    await state.clear()
    usage.fan_page_name_generator += 1


async def fan_page_sel_locale(message: types.Message, state: FSMContext):
    country_pages = len(locales) // 14
    data = await state.get_data()
    current_page = data.get('country_page', 0)

    locale = I18n.get_current()
    kb = _countries_kb(current_page, country_pages, locale.current_locale)

    message = await message.answer(_('–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É:'), reply_markup=kb.as_markup())
    await state.update_data(locale_message_id=message.message_id, country_page=current_page)


@farmers_router.message(F.text == __('üìç –ê–¥—Ä–µ—Å–∞'))
async def fan_page_address(message: types.Message, state: FSMContext):
    await state.set_state(AddressGen.selecting_country)
    await fan_page_sel_locale(message, state)


@farmers_router.callback_query(AddressGen.selecting_country)
async def fan_page_address_amount(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    locale = callback.data
    if locale == 'random':
        locale = secrets.choice(list(locales.keys()))

    await state.update_data(locale=locale)

    data = await state.get_data()
    locale_message_id = data['locale_message_id']
    await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=locale_message_id,
                                         text=_('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–¥—Ä–µ—Å:'))
    await state.set_state(AddressGen.entering_amount)


@farmers_router.message(AddressGen.entering_amount)
async def fan_page_address_gen(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 1 or amount > 50:
            raise ValueError
    except ValueError:
        await message.answer(_('–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ {} –¥–æ {}').format(1, 50))
        return

    data = await state.get_data()
    locale = data['locale']

    async with gen_semaphore:
        try:
            addresses = await generate_addresses(locale, amount)
            await _send_message_and_txt(message, '\n'.join(addresses), f'{locale} addresses.txt')
        except AttributeError as e:
            await message.answer(_('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ'))
        finally:
            await state.clear()

    usage.fan_page_address_generator += 1


@farmers_router.message(F.text == __('üìû –¢–µ–ª–µ—Ñ–æ–Ω'))
async def fan_page_phone(message: types.Message, state: FSMContext):
    await state.set_state(PhoneGen.selecting_country)
    await fan_page_sel_locale(message, state)


@farmers_router.callback_query(PhoneGen.selecting_country)
async def phone_gen_amount(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    locale = callback.data
    if locale == 'random':
        locale = secrets.choice(list(locales.keys()))

    await state.update_data(locale=locale)

    data = await state.get_data()
    locale_message_id = data['locale_message_id']
    await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=locale_message_id,
                                         text=_('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–º–µ—Ä—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω—É:'))
    await state.set_state(PhoneGen.entering_amount)


@farmers_router.message(PhoneGen.entering_amount)
async def phone_gen(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 1 or amount > 100:
            raise ValueError
    except ValueError:
        await message.answer(_('–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ {} –¥–æ {}').format(1, 100))
        return

    data = await state.get_data()
    locale = data['locale']

    async with gen_semaphore:
        loop = asyncio.get_event_loop()
        phones = await loop.run_in_executor(executor, generate_phones, locale, amount)

    await _send_message_and_txt(message, '\n'.join(phones), f'{locale} phones.txt')
    await state.clear()
    usage.fan_page_phone_generator += 1


@farmers_router.message(F.text == __('üí¨ –¶–∏—Ç–∞—Ç–∞'))
async def fan_page_quotes(message: types.Message, state: FSMContext):
    await state.set_state(QuoteGen.selecting_country)
    await fan_page_sel_locale(message, state)


@farmers_router.callback_query(QuoteGen.selecting_country)
async def quotes_amount(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    locale = callback.data
    if locale == 'random':
        locale = secrets.choice(list(locales.keys()))

    await state.update_data(locale=locale)

    data = await state.get_data()
    locale_message_id = data['locale_message_id']
    await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=locale_message_id,
                                         text=_('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏—Ç–∞—Ç:'))
    await state.set_state(QuoteGen.entering_amount)


@farmers_router.message(QuoteGen.entering_amount)
async def quotes_gen(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 1 or amount > 50:
            raise ValueError
    except ValueError:
        await message.answer(_('–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ {} –¥–æ {}').format(1, 50))
        return

    data = await state.get_data()
    locale = data['locale']

    async with gen_semaphore:
        quotes = await get_random_quotes(locale, amount)

    await _send_message_and_txt(message, '\n'.join(quotes), f'{locale} quotes.txt')
    await state.clear()
    usage.fan_page_quote_generator += 1


@farmers_router.message(F.text == __('üåê –í—Å–µ —Ä–∞–∑–æ–º'))
async def fan_page_all(message: types.Message, state: FSMContext):
    await state.set_state(AllFanPageGen.selecting_country)
    await fan_page_sel_locale(message, state)


@farmers_router.callback_query(AllFanPageGen.selecting_country)
async def fan_page_all_quantity(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    locale = callback.data
    if locale == 'random':
        locale = secrets.choice(list(locales.keys()))

    await state.update_data(locale=locale)

    data = await state.get_data()
    locale_message_id = data['locale_message_id']
    await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=locale_message_id,
                                         text=_('–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å fan page:'))
    await state.set_state(AllFanPageGen.entering_amount)


@farmers_router.message(AllFanPageGen.entering_amount)
async def fan_page_all_gen(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 1 or amount > 50:
            raise ValueError
    except ValueError:
        await message.answer(_('–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ {} –¥–æ {}').format(1, 10))
        return

    data = await state.get_data()
    locale = data['locale']

    async with gen_semaphore:
        loop = asyncio.get_event_loop()
        names = loop.run_in_executor(executor, generate_fan_page_names, amount)
        addresses = generate_addresses(locale, amount)
        phones = loop.run_in_executor(executor, generate_phones, locale, amount)
        quotes = get_random_quotes(locale, amount)

    names = await names
    addresses = await addresses
    phones = await phones
    quotes = await quotes

    text = ''
    for i in range(amount):
        formatted_part = _('–ù–∞–∑–≤–∞ fan page: {}\n–ê–¥—Ä–µ—Å–∞: {}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {}\n–¶–∏—Ç–∞—Ç–∞: {}').format(names[i], addresses[i], phones[i], quotes[i])
        text += f"{i + 1}. {formatted_part}\n\n"

    await _send_message_and_txt(message, text, 'fan_page_all.txt')
    await state.clear()
    usage.fan_page_all_generator += 1


async def _send_message_and_txt(message: types.Message, text: str, filename: str):
    buffer = io.BytesIO()
    buffer.name = filename
    buffer.write(text.encode())
    buffer.seek(0)

    input_file = types.BufferedInputFile(buffer.getvalue(), filename=buffer.name)

    if len(text) > 4096:
        await message.answer_document(input_file)
    else:
        await message.answer(text)
        await message.answer_document(input_file)
