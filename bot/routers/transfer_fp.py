import io

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.methods import SendMediaGroup
from aiogram.types import Message, InputMediaDocument, input_file as types_input_file
from aiogram.utils.i18n import gettext as _, lazy_gettext as __
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot.core.states import TransferFanPage
from bot.core.storage.main_storage import get_user_balance
from bot.functions import fb_account_checking
from bot.main_menu import show_menu
from bot.routers.fb_acc_check import check_semaphore
from bot.core.storage.main_storage import get_user_balance

transfer_fp = Router()

@transfer_fp.message(F.text == __("‚û°Ô∏è –ü–µ—Ä–µ–¥–∞—Ç–∏ Fan Page"))
async def check_account_blocked(message: Message, state: FSMContext):
    kb = ReplyKeyboardBuilder()
    kb.button(text=_('–ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É'))
    kb.button(text=_('üè† –í –º–µ–Ω—é')).button(text=_('üîßüêû –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É')).adjust(1)
    kb.adjust(1)

    await message.answer(_("‚úçÔ∏è –î–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ Fan Page –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Å–≤–æ—ó –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ Facebook (–∫–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º/—è–º–∏ –∞–±–æ .txt-—Ñ–∞–π–ª–æ–º."),
                         reply_markup=kb.as_markup(resize_keyboard=True))
    await state.set_state(TransferFanPage.start_checking)
    await state.update_data({'messages': [], 'txt': None})


@transfer_fp.message(TransferFanPage.start_checking, F.text == __('–ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É'))
async def check_links(message: Message, state: FSMContext):

    await message.answer(_("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–ª—ñ–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –±–∞–Ω, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ ..."))

    state_data = await state.get_data()
    messages = '\n'.join(state_data['messages'])
    txt = state_data['txt']

    raw_links = txt if txt else messages

    links = fb_account_checking.extract_links(raw_links)

    async with check_semaphore:
        active, blocked, errors = await fb_account_checking.check_urls(links)

    await state.update_data(account_number=len(active))

    message_text = _("""*
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {}
üî¥ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Çi–≤: {}
üü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Çi–≤: {}
    *""").format(len(active)+len(blocked), len(blocked), len(active))
    message_files = []

    if len(active) <= 30:
        message_text += f'\n\n*{_("–ê–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏")}:*\n' + '\n'.join(active)
    else:
        with io.BytesIO() as file:
            file.name = 'active_accounts.txt'
            file.write('\n'.join(active).encode('utf-8'))
            input_file = types_input_file.BufferedInputFile(file.getvalue(), filename=file.name)
            message_files.append(InputMediaDocument(media=input_file, caption=_('–ê–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏')))

    if len(blocked) <= 30:
        message_text += f'\n\n*{_("–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏")}:*\n' + '\n'.join(blocked)
    else:
        with io.BytesIO() as file:
            file.name = 'blocked_accounts.txt'
            file.write('\n'.join(blocked).encode('utf-8'))
            input_file = types_input_file.BufferedInputFile(file.getvalue(), filename=file.name)
            message_files.append(InputMediaDocument(media=input_file, caption=_('–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏')))

    await message.answer(message_text, parse_mode='markdown')

    if message_files:
        await message.bot(SendMediaGroup(chat_id=message.chat.id, media=message_files))

    if len(active) > 0:
        await state.set_state(TransferFanPage.fp_for_every_account)
        await message.answer(_("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å Fan Page –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–∞ –∫–æ–∂–Ω–∏–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –í–∞—Ä—Ç—ñ—Å—Ç—å Fan Page - 0.15$."))
    else:
        await show_menu(message, state)


@transfer_fp.message(TransferFanPage.start_checking)
async def on_links_message(message: Message, state: FSMContext):
    state_data = await state.get_data()
    messages = state_data['messages']
    txt = state_data['txt']

    if message.document and not txt:
        with io.BytesIO() as file:
            await message.bot.download(message.document.file_id, file)
            raw_links = file.read().decode('utf-8')
        await state.update_data({'txt': raw_links})

    elif message.text and not txt:
        if len(messages) == 10:
            await message.answer(_('–ó–∞–±–∞–≥–∞—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —Å–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à–µ'))
            await state.clear()
            await show_menu(message, state)

        messages.append(message.text)
        await state.update_data({'messages': messages})

@transfer_fp.message(TransferFanPage.fp_for_every_account)
async def fp_for_every_account(message: Message, state: FSMContext):

    await state.update_data(fp_for_every_account=message.text)
    user_request = await state.get_data()

    balance = await get_user_balance(message.from_user.id)
    needed_amount = int(user_request['fp_for_every_account'])*int(user_request['account_number'])*0.15

    if balance >= needed_amount:

        await message.answer(_("–ó–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –ø—Ä–∏–π–Ω—è—Ç–æ!"))
        await show_menu(message, state)

    else:

        lacking_amount = needed_amount - balance

        await message.answer(_("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ. –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ —Å—É–º–∞: {} $, —Å—É–º–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ: {} $, –±—Ä–∞–∫ –∫–æ—à—Ç—ñ–≤: {} $.").format(needed_amount, balance, lacking_amount))
        await message.answer(_("‚úçÔ∏è –î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –Ω–∞–ø–∏—à—ñ—Ç—å —Å–∞–ø–æ—Ä—Ç—É @mustage_support (–º–æ–∂–ª–∏–≤–∞ –æ–ø–ª–∞—Ç–∞ –≤ USDT): –ü—Ä–∏–≤—ñ—Ç, —Ö–æ—á—É –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å —É —Ä–æ–±–æ—Ç—ñ @mustage_service_bot –Ω–∞ {—Å—É–º–º–∞_–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è} $."))
        await show_menu(message, state)